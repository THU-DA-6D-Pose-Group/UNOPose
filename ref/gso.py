# encoding: utf-8
"""This file includes necessary params, info."""
import os
import mmengine
import os.path as osp
from dataclasses import dataclass
import numpy as np
from lib.utils.utils import lazy_property

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")


@dataclass
class gso:
    dataset_root = osp.join(data_root, "google_scanned_objects/")

    # ---------------------------------------------------------------- #
    # GSO DATASET
    # ---------------------------------------------------------------- #
    @lazy_property
    def train_objs(self):
        return [line.strip("\n") for line in open(osp.join(self.dataset_root, "train_objects.txt"), "r")]

    @lazy_property
    def test_objs(self):
        return [line.strip("\n") for line in open(osp.join(self.dataset_root, "test_objects.txt"), "r")]

    @lazy_property
    def objects(self):
        return list(sorted(self.train_objs + self.test_objs))

    @lazy_property
    def id2obj(self):
        return {i: obj for i, obj in enumerate(self.objects)}

    @lazy_property
    def obj_num(self):
        return len(self.id2obj)

    @lazy_property
    def obj2id(self):
        return {_name: _id for _id, _name in self.id2obj.items()}

    # diameters = np.array([mmengine.load(osp.join(dataset_root, obj, "object_diameter.pkl")) for obj in objects]) # in m!

    # Camera info
    width = 512
    height = 512
    zNear = 0.25
    zFar = 6.0
    center = (height / 2, width / 2)
    camera_matrix = np.array([[468.605, 0, 256.0], [0, 468.605, 256.0], [0, 0, 1]])

    def model_path(self, obj_name):
        model_path = osp.join(self.dataset_root, obj_name, f"model_recon_fps16.pkl")
        return model_path

    @lazy_property
    def fps_points(self):
        """key is str(obj_id) generated by
        core/unspre/tools/gso/gso_compute_fps_from_model_recon.py."""
        fps_points_path = osp.join(self.dataset_root, "recon_fps_points.pkl")
        assert osp.exists(fps_points_path), fps_points_path
        fps_dict = mmengine.load(fps_points_path)
        return fps_dict

    @lazy_property
    def keypoints_3d(self):
        """key is str(obj_id) generated by
        core/unspre/tools/gso/gso_compute_kps3d_from_model_recon.py."""
        keypoints_3d_path = osp.join(self.dataset_root, "recon_kps_points.pkl")
        assert osp.exists(keypoints_3d_path), keypoints_3d_path
        kpts_dict = mmengine.load(keypoints_3d_path)
        return kpts_dict
