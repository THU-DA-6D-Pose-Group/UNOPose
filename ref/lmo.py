# encoding: utf-8
"""This file includes necessary params, info."""
import os, sys
import mmengine
import os.path as osp

import numpy as np
from dataclasses import dataclass
from lib.utils.utils import lazy_property

cur_dir = osp.abspath(osp.dirname(__file__))
sys.path.insert(0, osp.join(cur_dir, "../"))
sys.path.insert(0, osp.join(cur_dir, "../third_party/bop_toolkit/"))
from bop_toolkit_lib import inout

# ---------------------------------------------------------------- #
# ROOT PATH INFO
# ---------------------------------------------------------------- #
cur_dir = osp.abspath(osp.dirname(__file__))
root_dir = osp.normpath(osp.join(cur_dir, ".."))
# directory storing experiment data (result, model checkpoints, etc).
output_dir = osp.join(root_dir, "output")

data_root = osp.join(root_dir, "datasets")
bop_root = osp.join(data_root, "BOP_DATASETS/")


# ---------------------------------------------------------------- #
# LINEMOD OCCLUSION DATASET
# ---------------------------------------------------------------- #
@dataclass
class lmo:
    dataset_root = osp.join(bop_root, "lmo")
    train_dir = osp.join(dataset_root, "train")
    test_dir = osp.join(dataset_root, "test")
    model_dir = osp.join(dataset_root, "models")
    model_eval_dir = osp.join(dataset_root, "models_eval")
    model_scaled_simple_dir = osp.join(dataset_root, "models_scaled_f5k")
    vertex_scale = 0.001

    test_scenes = [2]

    # object info
    objects = [
        "ape",
        "can",
        "cat",
        "driller",
        "duck",
        "eggbox",
        "glue",
        "holepuncher",
    ]
    id2obj = {
        1: "ape",
        #  2: 'benchvise',
        #  3: 'bowl',
        #  4: 'camera',
        5: "can",
        6: "cat",
        #  7: 'cup',
        8: "driller",
        9: "duck",
        10: "eggbox",
        11: "glue",
        12: "holepuncher",
        #  13: 'iron',
        #  14: 'lamp',
        #  15: 'phone'
    }
    obj_num = len(id2obj)
    obj2id = {_name: _id for _id, _name in id2obj.items()}

    diameters = (
        np.array(
            [
                102.099,  # 1
                # 247.506,
                # 167.355,
                # 172.492,
                201.404,  # 5
                154.546,  # 6
                # 124.264,
                261.472,  # 8
                108.999,  # 9
                164.628,  # 10
                175.889,  # 11
                145.543,  # 12
                # 278.078,
                # 282.601,
                # 212.358,
            ]
        )
        / 1000.0
    )

    # Camera info
    width = 640
    height = 480
    zNear = 0.25
    zFar = 6.0
    center = (height / 2, width / 2)
    camera_matrix = np.array([[572.4114, 0, 325.2611], [0, 573.57043, 242.04899], [0, 0, 1]])

    def __post_init__(self):
        self.model_paths = [osp.join(self.model_dir, "obj_{:06d}.ply").format(_id) for _id in self.id2obj]
        self.texture_paths = None
        self.model_colors = [((i + 1) * 10, (i + 1) * 10, (i + 1) * 10) for i in range(self.obj_num)]  # for renderer

    def model_path(self, obj_name):
        obj_id = self.obj2id[obj_name]
        return osp.join(self.model_dir, f"obj_{obj_id:06d}.ply")

    @lazy_property
    def models_info(self):
        """key is str(obj_id)"""
        models_info_path = osp.join(self.model_dir, "models_info.json")
        assert osp.exists(models_info_path), models_info_path
        models_info = mmengine.load(models_info_path)  # key is str(obj_id)
        return models_info

    @lazy_property
    def fps_points(self):
        """key is str(obj_id) generated by
        core/gdrn_modeling/tools/lmo/lmo_2_compute_fps.py."""
        # fps_points_path = osp.join(self.model_dir, "fps_points_objkey.pkl")
        fps_points_path = osp.join(self.model_dir, "fps_points.pkl")
        assert osp.exists(fps_points_path), fps_points_path
        fps_dict = mmengine.load(fps_points_path)
        return fps_dict

    @lazy_property
    def keypoints_3d(self):
        """key is str(obj_id) generated by
        core/roi_pvnet/tools/lmo/lmo_2_compute_keypoints_3d.py."""
        # keypoints_3d_path = osp.join(self.model_dir, "keypoints_3d_objkey.pkl")
        keypoints_3d_path = osp.join(self.model_dir, "keypoints_3d.pkl")
        assert osp.exists(keypoints_3d_path), keypoints_3d_path
        kpts_dict = mmengine.load(keypoints_3d_path)
        return kpts_dict

    @lazy_property
    def extents_3d(self):
        extents_dict = {}
        for obj_id, obj in self.id2obj.items():
            model_path = osp.join(self.model_dir, f"obj_{obj_id:06d}.ply")
            model = inout.load_ply(model_path, vertex_scale=self.vertex_scale)
            pts = model["pts"]
            xmin, xmax = np.amin(pts[:, 0]), np.amax(pts[:, 0])
            ymin, ymax = np.amin(pts[:, 1]), np.amax(pts[:, 1])
            zmin, zmax = np.amin(pts[:, 2]), np.amax(pts[:, 2])
            size_x = xmax - xmin
            size_y = ymax - ymin
            size_z = zmax - zmin
            extents_dict[obj] = np.array([size_x, size_y, size_z], dtype="float32")
        return extents_dict
